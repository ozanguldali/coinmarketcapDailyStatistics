#qplot(data = daily_coins_df, Price, fill = CoinName, bins = 30)
readCoin <- function() {
str <- readline(prompt = "Enter the coin name you'd like to investigate: ")
return(str)
}
calledCoin <- readCoin()
repeatValue <- TRUE
while ( repeatValue ) {
strWhich <- readline(prompt = "Would you like to get the all data set or in a specific date interval data set (all / specific): ")
if ( strWhich == "all" ) {
dateInterval <- FALSE
repeatValue <- FALSE
} else if ( strWhich == "specific" ) {
dateInterval <- TRUE
repeatValue <- FALSE
} else {
print("Please enter only \"all\" or \"specific\"")
repeatValue <- TRUE
}
}
if ( !dateInterval ) {
printf <- function(...) cat(sprintf(...))
startDate <- "2018-02-27"
printf("End date must be smaller than or equal to %s since I am not a fortune teller :)\n", Sys.Date())
strEnd <- readline(prompt = "Please enter the end date in the format (yyyy-mm-dd): ")
endDate <- strEnd
} else {
printf <- function(...) cat(sprintf(...))
printf("Start date must be greater than or equal to 2018-02-27 since my database create on this date :)\n")
strStart <- readline(prompt = "Please enter the start date in the format (yyyy-mm-dd): ")
startDate <- strStart
printf("End date must be smaller than or equal to %s since I am not a fortune teller :)\n", Sys.Date())
strEnd <- readline(prompt = "Please enter the end date in the format (yyyy-mm-dd): ")
endDate <- strEnd
}
dateList <- seq( as.Date(startDate), as.Date(endDate), by = "days" )
dateList <- gsub("-", "", dateList)
dfList <- paste(dateList, "coins_df", sep = "-")
coin_df_name <- paste(calledCoin, "df", sep = "-")
new_df <- data.frame( dfList[1],
get(dfList[1])[get(dfList[1])$CoinName==calledCoin, "MarketCap"],
get(dfList[1])[get(dfList[1])$CoinName==calledCoin, "Price"],
get(dfList[1])[get(dfList[1])$CoinName==calledCoin, "Volume24h"])
names(new_df) <- c("RecordDates", "MarketCap", "Price", "Volume24h")
for (i in 2:length(dfList)) {
temp_df <- data.frame( RecordDates = dfList[i],
MarketCap = get(dfList[i])[get(dfList[i])$CoinName==calledCoin, "MarketCap"],
Price = get(dfList[i])[get(dfList[i])$CoinName==calledCoin, "Price"],
Volume24h = get(dfList[i])[get(dfList[i])$CoinName==calledCoin, "Volume24h"])
names(temp_df) <- c("RecordDates", "MarketCap", "Price", "Volume24h")
new_df <- rbind(new_df, temp_df)
}
assign(coin_df_name, new_df)
get(coin_df_name)
load("C:/Users/ASUS-/Desktop/bitirme/coinmarketcap/coinmarketcapDailyStatistics/20180227-20180306_coins_df.RData")
View(`20180303-coins_df`)
View(`20180302-coins_df`)
getwd()
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/application.R', echo=TRUE)
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/application.R', echo=TRUE)
projDir <- toString(getwd())
projDir
load("C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/20180227-20180309_coins_df.RData")
View(`20180309-coins_df`)
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/application.R', echo=TRUE)
get(coin_df_name)
install.packages('rvest')
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/application.R', echo=TRUE)
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/application.R', echo=TRUE)
calledCoin = Bitcoin
calledCoin <- Bitcoin
calledCoin <- 'Bitcoin'
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/createCoinDataframe.R', echo=TRUE)
get(coin_df_name)
marketcap_data_html <- html_nodes(webpage, '.no-wrap.market-cap.text-right')
marketcap_data <- html_text(marketcap_data_html)
marketcap_data
marketcap_data <- gsub("\n", "", marketcap_data)
marketcap_data
marketcap_data <- gsub(",", "", marketcap_data)
marketcap_data
marketcap_data <- substring(marketcap_data, 2, length(marketcap_data))
marketcap_data
price_data_html <- html_nodes(webpage, '.price')
price_data <- html_text(price_data_html)
price_data
marketcap_data <- gsub("$", "", marketcap_data)
price_data <- gsub("$", "", price_data)
price_data
price_data <- gsub("\\$", "", price_data)
price_data
'akd' %in% daily_coins_df$CoinName
'Bitcoin' %in% daily_coins_df$CoinName
calledCoin
calledCoin %in% daily_coins_df$CoinName
load("C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/20180227-20180310_coins_df.RData")
source('getCoinsData.R')
source('getDesiredCoin.R')
source('getDesiredDateInterval.R')
load("C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/20180227-20180310_coins_df.RData")
source('getCoinsData.R')
source('getDesiredCoin.R')
source('getDesiredDateInterval.R')
source('getDesiredDataframes.R')
source('createCoinDataframe.R')
get(coin_df_name)
install.packages('xml2')
source('loginProject.R')
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/adminApp.R')
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/adminApp.R')
list.dirs(path = ".", full.names = TRUE, recursive = TRUE)
list.dirs(path = currentDirectory, full.names = TRUE, recursive = TRUE)
currentDirectory <- getwd()
list.dirs(path = currentDirectory, full.names = TRUE, recursive = TRUE)
list.files(path = currentDirectory, pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
list.files(path = currentDirectory, pattern = "\\.RData", all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
lastWorkspace <- list.files(path = currentDirectory, pattern = "\\.RData", all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
lastWorkspace
isString
is.character(lastWorkspace)
lastWorkspace <- list.files(path = currentDirectory, pattern = "\\.RData", all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)[1]
lastWorkspace
lastWorkspace <- toString(lastWorkspace)
lastWorkspace
lastWorspaceName <- paste(currentDirectory, lastWorkspaceFolder, sep = "/")
currentDirectory <- toString(getwd())
lastWorkspaceFolder <- list.files(path = currentDirectory, pattern = "\\.RData", all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
lastWorkspaceFolder <- toString(lastWorkspaceFolder)
lastWorspaceName <- paste(currentDirectory, lastWorkspaceFolder, sep = "/")
lastWorspaceName
load(toString(lastWorspaceName))
projDirold <- toString(getwd())
listFiles <- list.files(path = currentDirectory, pattern = "\\.RData", all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
listFiles <- toString(listFiles)
previousDate <- Sys.Date() - 1
previousDateString <- gsub("-", "", previousDate)
oldWorkspaceFolder <- paste(paste("20180227", previousDateString, sep = "-"), "coins_df.RData", sep = "_")
oldWorkspaceFolder %in% listFiles
oldWorkspaceFolder <- "20180227-20180311_coins_df.RData"
oldWorkspaceFolder %in% listFiles
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/application.R', echo=TRUE)
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/application.R', echo=TRUE)
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/application.R', echo=TRUE)
source('loginProject.R')
if ( loginValue == 'admin' ) {
source('adminApp.R')
} else {
source('spectatorApp.R')
}
if ( loginValue == 'admin' ) {
source('adminApp.R')
} else {
source('spectatorApp.R')
}
if ( loginValue == 'admin' ) {
source('adminApp.R')
} else {
source('spectatorApp.R')
}
source('loginProject.R')
if ( loginValue == 'admin' ) {
source('adminApp.R')
} else {
source('spectatorApp.R')
}
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/application.R', echo=TRUE)
projDirold <- toString(getwd())
listFiles <- list.files(path = currentDirectory, pattern = "\\.RData", all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
listFiles <- toString(listFiles)
previousDate <- Sys.Date() - 1
previousDateString <- gsub("-", "", previousDate)
oldWorkspaceFolder <- paste(paste("20180227", previousDateString, sep = "-"), "coins_df.RData", sep = "_")
if ( oldWorkspaceFolder %in% listFiles ) {
oldWorkspaceName <- paste(projDirold, oldWorkspaceFolder, sep = "/")
load(toString(oldWorkspaceName))
continueAdminApp <- TRUE
} else {
print("The workspace is already up-to-date!")
continueAdminApp <- FALSE
}
source('loginProject.R')
source('loginDecision.R')
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/adminApp.R', echo=TRUE)
try <- 'aa'
if (try == "aa")
try == "aa"
try == 'aa'
"aa" == 'aa'
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/application.R', echo=TRUE)
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/application.R', echo=TRUE)
load("C:/Users/ASUS-/Desktop/coinmarketcapDailyStatistics/20180227-20180312_coins_df.RData")
View(`20180312-coins_df`)
source('application.R')
get(coin_df_name)
source('application.R')
source('resultProject.R')
get(coin_df_name)
source('C:/Users/ASUS-/Desktop/bitirme/coinmarketcapDailyStatistics/application.R', echo=TRUE)
source('application.R')
get(coin_df_name);
source('resultProject.R')
source('resultProject.R')
source('resultProject.R')
source('resultProject.R')
source('resultProject.R')
source('resultProject.R')
View(coin_df_name)
View('coin_df_name')
data(coin_df_name)
data(get(coin_df_name))
data('coin_df_name')
data(View(get(coin_df_name)))
View('coin_df_name')
source('resultProject.R')
IsDate('2018-03-17')
is.data.frame('2018-03-27')
IsDate
help(IsDate)
is.Date
is.Date()
IsDate <- function ( mydate, date.format = "%y-%m-%d" ) {
tryCatch ( !is.na( as.Date( mydate, date.format ) ),
error = function( err )
{FALSE} )
}
IsDate("94")
IsDate("2018-03-89")
IsDate("2018-03-21")
ex <- "2018-03-21"
IsDate(ex)
mydate <- "2018-03-21"
IsDate(mydate)
IsDate(mydate = ex)
IsDate("2018-3-21")
IsDate("2018-3-1")
IsDate <- function(mydate, date.format = "%d/%m/%y") {
# Check if field is a date using as.Date that looks for unambiguous dates
#   Assumes date format so NA returned not Character error.
#   Why? with no date format, R tries two defaults then gives error.
#   BUT With a dateformat R returns NA
# Args
#   Suspected date and optional date format string
# Returns
#   TRUE if thinbks it is a date
tryCatch(!is.na(as.Date(mydate, date.format)),
error = function(err) {FALSE})
}
IsDate("1/3/2015")
IsDate("01/03/2015")
IsDate("01-03-2015")
IsDate <- function(mydate, date.format = "%d-%m-%y") {
# Check if field is a date using as.Date that looks for unambiguous dates
#   Assumes date format so NA returned not Character error.
#   Why? with no date format, R tries two defaults then gives error.
#   BUT With a dateformat R returns NA
# Args
#   Suspected date and optional date format string
# Returns
#   TRUE if thinbks it is a date
tryCatch(!is.na(as.Date(mydate, date.format)),
error = function(err) {FALSE})
}
IsDate("01-03-2015")
IsDate <- function(mydate, date.format = "%y-%m-%d") {
# Check if field is a date using as.Date that looks for unambiguous dates
#   Assumes date format so NA returned not Character error.
#   Why? with no date format, R tries two defaults then gives error.
#   BUT With a dateformat R returns NA
# Args
#   Suspected date and optional date format string
# Returns
#   TRUE if thinbks it is a date
tryCatch(!is.na(as.Date(mydate, date.format)),
error = function(err) {FALSE})
}
IsDate("01-03-2015")
IsDate("2015-03-01")
IsDate <- function(mydate, date.format = "%Y-%m-%d") {
# Check if field is a date using as.Date that looks for unambiguous dates
#   Assumes date format so NA returned not Character error.
#   Why? with no date format, R tries two defaults then gives error.
#   BUT With a dateformat R returns NA
# Args
#   Suspected date and optional date format string
# Returns
#   TRUE if thinbks it is a date
tryCatch(!is.na(as.Date(mydate, date.format)),
error = function(err) {FALSE})
}
IsDate("2015-03-01")
IsDate("2015-03-01")
isDate <- IsDate("2015-03-01")
isDate
IsDate("2015-03-32")
IsDate("2015-03-316")
IsDate <- function(mydate, date.format = "%Y-%M-%D") {
return (tryCatch(!is.na(as.Date(mydate, date.format)),
error = function(err) {FALSE}) )
}
IsDate("2015-03-316")
IsDate("2015-03-31")
IsDate("2015-03-30")
IsDate("2015-03-08")
IsDate <- function(mydate, date.format = "%yyyy-%mm-%dd") {
return (tryCatch(!is.na(as.Date(mydate, date.format)),
error = function(err) {FALSE}) )
}
IsDate("2015-03-08")
IsDate("2015-3-8")
IsDate <- function(mydate, date.format = "%Y-%m-%d") {
return (tryCatch(!is.na(as.Date(mydate, date.format)),
error = function(err) {FALSE}) )
}
IsDate("2015-3-8")
IsDate("2015-3-32")
IsDate("2015-3-328")
IsDate <- function(mydate, date.format = "%Y-%m-%d") {
return (tryCatch(!is.na(as.Date(as.character(mydate), date.format)),
error = function(err) {FALSE}) )
}
IsDate("2015-3-328")
IsDate("2015-3-32")
IsDate("2015-3-8")
IsDate("2015-03-08")
IsDate("2015-04-31")
IsDate("2015-04-30")
source('getDesiredDateInterval.R')
"2018-03-01" > "2018-03-02"
"2018-03-01" > "2018-02-28"
TRUE | TRUE
TRUE || TRUE
TRUE | FALSE
TRUE || FALSE
FALSE | FALSE
FALSE || FALSE
isDateLess_end <- strEnd <= endDate_limit
endDate_limit <- Sys.Date()
isDateLess_end <- strEnd <= endDate_limit
isDateLess_end
strEnd => startDate_limit
source('getDesiredDateInterval.R')
source('getDesiredDateInterval.R')
source('application.R')
source('application.R')
hgıyhıoyhoıuj
tgyhujkl
demo
demo
demo()
application.R
application.R
demo()
source('application.R')
32
source('application.R')
source('application.R')
source('application.R')
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/getDesiredDateInterval.R', echo=TRUE)
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/getDesiredDateInterval.R', echo=TRUE)
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/getDesiredDateInterval.R', echo=TRUE)
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/getDesiredDateInterval.R', echo=TRUE)
debugSource('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/getDesiredDateInterval.R', echo=TRUE)
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/getDesiredDateInterval.R', echo=TRUE)
IsDate("2018-02-30")
as.Date("2018-02-30")
inherits("2018-02-30", "Date")
inherits("2018/02/30", "Date")
inherits("2018/02/29", "Date")
inherits("2018/02/28", "Date")
inherits("2018-02-28", "Date")
help("inherits")
inherits("2018-02-28", "Date")
today <- Sys.Date()
inherits(today, "Date")
inherits("2018-03-16", "Date")
inherits(as.Date("2018-03-16"), "Date")
inherits(as.Date("2018-03-31"), "Date")
inherits(as.Date("2018-02-31"), "Date")
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/formatControl.R', echo=TRUE)
IsDate("2018-02-30")
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/getDesiredDateInterval.R', echo=TRUE)
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/getDesiredDateInterval.R', echo=TRUE)
load("C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/20180227-20180318_coins_df.RData")
rm(list = ls()[!grep("-coins_df", ls())])
rm(list = ls()[!grep("T", ls())])
rm(list = grep("-coins_df^", ls(), value = TRUE, invert = TRUE))
load("C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/20180227-20180318_coins_df.RData")
rm(list = grep("-coins_df", ls(), value = TRUE, invert = TRUE))
save.image("C:/Users/TOSHIBA/Desktop/20180227-20180318_coins_df.RData")
source('application.R')
source('application.R')
View(`20180407-coins_df`)
daily_coins_df
source('application.R')
source('application.R')
source('application.R')
source('application.R')
source('application.R')
load("C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/20180227-20180407_coins_df.RData")
View(daily_coins_df)
source('application.R')
View(`20180227-coins_df`)
clear
source('src/application.R')
source('src/run/application.R')
source('src/run/application.R')
source('src/run/application.R')
source('src/run/application.R')
source('src/run/application.R')
create.project(template='minimal')
install.packages('ProjectTemplate')
create.project(template='minimal')
library('ProjectTemplate')
create.project(template='minimal')
library('ProjectTemplate')
create.project(template='minimal')
devtools::install_github('johnmyleswhite/ProjectTemplate')
source('src/run/application.R')
View('src/run/application')
source('src/run/application.R')
yrange <- coin_df_name$price
coin_df_name
xrange <- get(coin_df_name)$RecordDates
yrange <- get(coin_df_name)$price
yrange <- get(coin_df_name)$Price
length(yrange)
source('C:/Users/ASUS-/Desktop/bitirme/coinmarketcapDailyStatistics/src/run/puts/graphPRoject.R', echo=TRUE)
source('C:/Users/ASUS-/Desktop/bitirme/coinmarketcapDailyStatistics/src/run/puts/graphPRoject.R', echo=TRUE)
source('C:/Users/ASUS-/Desktop/bitirme/coinmarketcapDailyStatistics/src/run/puts/graphPRoject.R', echo=TRUE)
source('C:/Users/ASUS-/Desktop/bitirme/coinmarketcapDailyStatistics/src/run/puts/graphPRoject.R', echo=TRUE)
source('C:/Users/ASUS-/Desktop/bitirme/coinmarketcapDailyStatistics/src/run/puts/graphPRoject.R', echo=TRUE)
source('C:/Users/ASUS-/Desktop/bitirme/coinmarketcapDailyStatistics/src/run/puts/graphPRoject.R', echo=TRUE)
source('C:/Users/ASUS-/Desktop/bitirme/coinmarketcapDailyStatistics/src/run/puts/graphPRoject.R', echo=TRUE)
source('C:/Users/ASUS-/Desktop/bitirme/coinmarketcapDailyStatistics/src/run/puts/graphPRoject.R', echo=TRUE)
source('C:/Users/ASUS-/Desktop/bitirme/coinmarketcapDailyStatistics/src/run/puts/graphPRoject.R', echo=TRUE)
source('C:/Users/ASUS-/Desktop/bitirme/coinmarketcapDailyStatistics/src/run/puts/graphPRoject.R', echo=TRUE)
source('C:/Users/ASUS-/Desktop/bitirme/coinmarketcapDailyStatistics/src/run/puts/graphPRoject.R', echo=TRUE)
source('C:/Users/ASUS-/Desktop/bitirme/coinmarketcapDailyStatistics/src/run/puts/graphPRoject.R', echo=TRUE)
View(get(coin_df_name))
source('C:/Users/ASUS-/Desktop/bitirme/coinmarketcapDailyStatistics/src/run/puts/graphPRoject.R', echo=TRUE)
source('C:/Users/ASUS-/Desktop/bitirme/coinmarketcapDailyStatistics/src/run/puts/graphPRoject.R', echo=TRUE)
source('C:/Users/ASUS-/Desktop/bitirme/coinmarketcapDailyStatistics/src/run/puts/graphPRoject.R', echo=TRUE)
source('src/run/application.R')
source('C:/Users/TOSHIBA/Desktop/bitirme/r2html/second.R', echo=TRUE)
source('C:/Users/TOSHIBA/Desktop/bitirme/r2html/second.R', echo=TRUE)
source('src/run/application.R')
source('src/run/application.R')
source('src/run/application.R')
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/src/run/puts/dataframe/resultProject.R', echo=TRUE)
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/src/run/puts/dataframe/resultProject.R', echo=TRUE)
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/src/run/puts/dataframe/resultProject.R', echo=TRUE)
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/src/run/puts/dataframe/resultProject.R', echo=TRUE)
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/src/run/puts/dataframe/resultProject.R', echo=TRUE)
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/src/run/puts/dataframe/resultProject.R', echo=TRUE)
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/src/run/puts/dataframe/resultProject.R', echo=TRUE)
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/src/run/puts/dataframe/resultProject.R', echo=TRUE)
source('C:/Users/TOSHIBA/Desktop/bitirme/coinmarketcapDailyStatistics/src/run/puts/dataframe/resultProject.R', echo=TRUE)
c1 <- c('a','hıd','hg','y')
c2 <- c('tg','hak','ty','oa')
for i in 1:4
a[1,i] <- c1[i]
for i in 1:4
a[2,i] <- c2[i]
print(a)
sort(a, decreasing = TRUE)
for (i in 1:4){}
for (i in 1:4){
a[1][i] <- c1[i]
a[2][i] <- c2[i]
}
a
a <- 3
for (i in 1:4){
a[1][i] <- c1[i]
a[2][i] <- c2[i]
}
for (i in 1:4){
a(1,i) <- c1[i]
a(2,i) <- c2[i]
}
for (i in 1:4){
a(1,i) <- c1(i)
a(2,i) <- c2(i)
}
c1(1)
c1
c1(1,1)
c1[1]
a(1,1)
sort(get(coin_df_name), descending = TRUE)
sort(get(coin_df_name), decreasing =  TRUE)
sort(get(coin_df_name)$RecordDates, decreasing =  TRUE)
View(get(coin_df_name)[sort(get(coin_df_name)$RecordDates, decreasing =  TRUE),])
source('src/run/application.R')
source('src/run/application.R')
install.packages('rvest')
source('src/run/application.R')
source('src/run/application.R')
